a => input[3:0];
b => input[3:0];
start => input;
res => output[7:0];
ready => output;

r0 => reg[3:0];
r1 => reg[7:0];
r2 => reg[7:0];

.main : state {
    then => starting;
}

.starting : decision {
    check => start;
    yes => init;
    no => main;
}

.init : conditional {
    r0 => a;
    r1 => b;
    r2 => 0;
    ready => 0;
    then => mult;
}

.mult : state {
    r0 => r0 >> 1;
    r1 => r1 << 1;
    then => finish_check;
}

.finish_check : decision {
    check => r0 == 0;
    yes => finalize;
    no => add_check;
}

.finalize : conditional {
    res => r2;
    ready => 1;
    then => main;
}

.add_check : decision {
    check => r0[0];
    yes => do_add;
    no => mult;
}

.do_add : conditional {
    r2 => r2 + r1;
    then => mult;
}
